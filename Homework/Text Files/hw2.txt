R3.1-R3.13; Page 146
Due: March 8, 2019

R-3.1: Give the next five pseudorandom numbers generated by the
process described on page 113, with a = 12, b = 5, and n = 100, 
and 92 as the seed for cur.
A-3.1: 
21, 33, 45, 57, 69

R-3.2: Write a Java method that repeatedly selects and removes
a random entry from an array until the array holds no more entires

R-3.3: Explain the changes that would have to be made to the program
of Code Fragment 3.8 so that it could perform the Caesar cipher for messages
that are written in an alphabet-based language other than English, such as Greek,
Russian, or Hebrew

R-3.4: The TicTacToe class of Code Fragments 3.9 and 3.10 has a flaw, in that
it allows a player to place a mark even after the game has already been won by
someone.
modify the class so that the putMark method throws an illegalStateException in that
case.

R-3.5 The removeFirst method of the SinglyLinkedList class includes a special case to 
reset the tail field to null when deleting the last node of a list (see lines 51 and 51 of 
Code Fragment 3.15).

What are the consequences if we were to remove those two lines from the code? Explain why the
class would or would not work with such a modification.

R-3.6 Give an algorithm for ifnding the second-to-last node in a singly linked list in which the
last node is indicated by a null next reference.

R-3.7 Consider the implementation of CircularlyLinkedList.addFirst, in Code Fragment 3.16. The else
body at lines 39 and 40 of that method relies on a locally declarable variable, newest. Redesign that clause
to avoid use of any local variable

R-3.8 Describe a method for finding the middle node a doubly linked list with header and trailer
sentinels by "link hopping," and without relying on explicit knowledge of the size of the list. In the case of
an even number of nodes, report the node slightly left of center as the "middle". What is the running time of this method?

R-3.9 give the implementation of the size() method for the SingularlyLinkedList class,
assuming that we did not maintian size as an instance variable.

R-3.10 Give an implementation of the size() method for the CircularlyLinkedList class, 
assuming that we did not maintain size as an instance variable.

R-3.11 Give an implementation of the size() method for the DoublyLinkedList class,
assuming that we did not maintain size as an instance variable.

R-3.12 Implement a rotate() method in the SinglyLinkedList class, 
which has semantics equal to addLast(removeFirst()). Yet without creating any new node. 